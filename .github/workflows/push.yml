name: 'push'

on:
  label:
    types: [created, edited]
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 5'

env:
  # https://github.com/tox-dev/tox/issues/1468
  PY_COLORS: 1

jobs:

#
# Python code format
#

  fmt:
    runs-on: ubuntu-latest
    name: '🐍 black'
    steps:

    - name: '🧰 Checkout'
      uses: actions/checkout@v3

    - name: '🐍 Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: '🐍 Install dependencies'
      run: |
        pip install -U pip --progress-bar off
        pip install -U virtualenv tox --progress-bar off

    - name: '🐍 Run black'
      run: tox -e py311-fmt -- --check

#
# Linux linting and unit tests
#

  #lin:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      include:
  #        - { py: '3.11' , task: 311-lint }
  #        - { py: '3.7'  , task: 37-unit }
  #        - { py: '3.11' , task: 311-unit }
  #  name: '🐧 Ubuntu · ${{ matrix.task }}'
  #  steps:
#
  #  - name: '🧰 Checkout'
  #    uses: actions/checkout@v3
#
  #  - name: '🐍 Setup Python'
  #    uses: actions/setup-python@v4
  #    with:
  #      python-version: ${{ matrix.py }}
#
  #  - name: '🐍 Install dependencies'
  #    run: |
  #      pip install -U pip --progress-bar off
  #      pip install -U virtualenv tox --progress-bar off
#
  #  - name: '🚧 Run job'
  #    run: tox -e py${{ matrix.task }} -- --color=yes

#
# Docker (Linux) acceptance tests
#

  #docker:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      task: [
  #        {do: 311-acceptance,  tag: llvm},
  #        {do: 311-vcomponents, tag: mcode},
  #      ]
  #  name: '🛳️ Container · ${{ matrix.task.do }} · ${{ matrix.task.tag }}'
  #  steps:
#
  #  - name: '🧰 Checkout'
  #    uses: actions/checkout@v3
  #    with:
  #      submodules: recursive
#
  #  - name: '🚧 Run job'
  #    run: docker run --rm -tv $(pwd):/src -w /src ghcr.io/vunit/dev/${{ matrix.task.tag }} tox -e py${{ matrix.task.do }}-ghdl

#
# Windows (MSYS2) with 'nightly' GHDL
#

  #win:
  #  runs-on: windows-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      task: [
  #        39-acceptance-ghdl,
  #        39-vcomponents-ghdl,
  #        39-lint,
  #        39-unit,
  #      ]
  #  name: '🟦 Windows · nightly · ${{ matrix.task }}'
  #  defaults:
  #    run:
  #      shell: msys2 {0}
  #  steps:
#
  #  - name: '🟦 Setup MSYS2'
  #    uses: msys2/setup-msys2@v2
  #    with:
  #      msystem: MINGW64
  #      update: true
  #      install: mingw-w64-x86_64-python-pip
#
  #  - name: '🧰 Checkout'
  #    uses: actions/checkout@v3
  #    with:
  #      submodules: recursive
#
  #  - name: '⚙️ Setup GHDL'
  #    uses: ghdl/setup-ghdl-ci@master
  #    with:
  #      backend: llvm
#
  #  - name: '🐍 Install dependencies'
  #    run: pip install -U tox --progress-bar off
#
  #  - name: '🚧 Run job'
  #    run: tox -e py${{ matrix.task }} -- --color=yes

#
# Release Notes (News) Validation
#
  news-matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        #run: echo 'matrix={"include":[{"project":"foo","config":"Debug"},{"project\":"bar","config":"Release"}]}' >> $GITHUB_OUTPUT
        run: |
          echo "${{ fromJSON(github.event.pull_request.labels.*.name) }}" >> json
          eval "pr_labels=( $(jq -r ' .[]. | @sh ' json) )"
          news_labels=()
          for label in ${pr_labels[*]}
          do
            if [[ "$label" =~ ^news:.* ]]; then
              news_labels+=($label)
            fi
          done
          echo "Found PR labels: $pr_labels"
          echo "Setting matrix to labels: $labels"
          news_json=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${news_labels[@]}")
          echo "matrix=$news_json" >> GITHUB_OUTPUT

  news:
    runs-on: ubuntu-latest
    needs: news-matrix-prep
    strategy:
      fail-fast: false
      matrix:
        news: ${{ fromJSON(needs.news-matrix-prep.outputs.matrix) }}
      #matrix:
      #  news:
      #  - breaking
      #  - bugfix
      #  - change
      #  - deprecation
      #  - misc
    name: '📰 Validate News · ${{ matrix.news }}'
    steps:

    - name: '🧰 Checkout'
      uses: actions/checkout@v3

    #- name: News file exists (docs/news.d/${{ github.event.pull_request.number }}.${{ matrix.news }}.rst)
    #  #if: contains(fromJSON('["news:${{ matrix.news }}"]'), github.event.pull_request.labels.*.name)
    #  if: contains(github.event.pull_request.labels.*.name, 'news:${{ matrix.news }}')
    #  run: test -f docs/news.d/${{ github.event.pull_request.number }}.${{ matrix.news }}.rst
    - name: News file exists
      run: |
        fname="$(echo ${{ github.event.pull_request.number }}.${{ matrix.news }}.rst | sed 's,news:,,g')"
        news_file="docs/news.d/$fname"
        echo "News file that must exist for the tag '${{ matrix.news }}': '$news_file'"
        test -f news_file

#
# Deploy to PyPI
#

  deploy:
    runs-on: ubuntu-latest
    #needs: [ fmt, lin, docker, win, news ]
    needs: [ fmt, news ]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: '🚀 Deploy'
    steps:

    - name: '🧰 Checkout'
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: '🐍 Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: '🐍 Install dependencies'
      run: |
        pip install -U pip
        pip install -U setuptools wheel twine

    - name: '🚀 Build and deploy to PyPI'
      if: github.repository == 'VUnit/vunit'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.VUNIT_HDL_PYPI_DEPLOY_TOKEN }}
      run: |
        ./tools/release.py validate
        python setup.py sdist
        twine upload dist/*
